/* **************************************************************************** */
/*                       ,,                     ,,  ,,                          */
/* `7MMF'  `7MMF'       `7MM       `7MMF'   `7MF'db *MM                         */
/*   MM      MM           MM         `MA     ,V      MM                         */
/*   MM      MM  ,pW"Wq.  MM  ,pW"Wq. VM:   ,V `7MM  MM,dMMb.   .gP"Ya  ,pP"Ybd */
/*   MMmmmmmmMM 6W'   `Wb MM 6W'   `Wb MM.  M'   MM  MM    `Mb ,M'   Yb 8I   `" */
/*   MM      MM 8M     M8 MM 8M     M8 `MM A'    MM  MM     M8 8M"""""" `YMMMa. */
/*   MM      MM YA.   ,A9 MM YA.   ,A9  :MM;     MM  MM.   ,M9 YM.    , L.   I8 */
/* .JMML.  .JMML.`Ybmd9'.JMML.`Ybmd9'    VF    .JMML.P^YbmdP'   `Mbmmd' M9mmmP' */
/*                                                                              */
/* **************************************************************************** */

/*! \file
 *
 * Encapsulate a GPIB DLL ressource  */
#pragma once

#include <windows.h>

# undef min
# include "../GPIB/IVisaInterface.hh"

namespace gpib
{
  /*! \brief Encapsulate a GPIB DLL ressource.

   * Very similar to camera_dll.hh as it is basically just a copy
   * paste of it with 2 seds. This surely can be improved but due the lack
   * of time, quick'n dirty will do.
   */
  class GpibDLL
  {
  public:
    /*! \brief  Load the dll from the GPIB when needed
     * 
     * \param dll_filepath Path of the .dll file generated by HoloVibes
     * \param gpib_path Path of the GPIB's instruction's file
     */
    static std::shared_ptr<IVisaInterface> load_gpib(const std::string& dll_filepath, const std::string gpib_path);
  private:
    /*! \brief Custom deleter the dll and the class. */
    class DeleterDLL
    {
    public:
      DeleterDLL(HINSTANCE dll_handle);
      void operator()(IVisaInterface* Gpib);
    private:
      HINSTANCE dll_handle_;
    };

  private:
    using FnInit = IVisaInterface* (*)(const std::string path);
  };
}
