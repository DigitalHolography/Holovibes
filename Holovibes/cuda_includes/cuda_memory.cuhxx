#pragma once

#include "logger.hh"

template <typename T>
void cudaXMalloc(T** devPtr, size_t size)
{
    cudaSafeCall(cudaXRMalloc(devPtr, size));
}

template <typename T>
void cudaXMallocHost(T** devPtr, size_t size)
{
    cudaSafeCall(cudaXRMallocHost(devPtr, size));
}

template <typename T>
void cudaXMallocManaged(T** devPtr, size_t size)
{
    cudaSafeCall(cudaXRMallocManaged(devPtr, size));
}

template <typename T>
void cudaXMallocAsync(T** devPtr, size_t size, const cudaStream_t stream)
{
    cudaSafeCall(cudaXRMallocAsync(devPtr, size, stream));
}

template <typename T>
cudaError_t cudaXRMalloc(T** devPtr, size_t size)
{
    LOG_DEBUG("Allocate {:.3f} Gib on Device", static_cast<float>(size) / (1024 * 1024 * 1024));
    return cudaMalloc(devPtr, size);
}

template <typename T>
cudaError_t cudaXRMallocHost(T** devPtr, size_t size)
{
    LOG_DEBUG("Allocate {:.3f} Gib on Host", static_cast<float>(size) / (1024 * 1024 * 1024));
    return cudaMallocHost(devPtr, size);
}

template <typename T>
cudaError_t cudaXRMallocManaged(T** devPtr, size_t size)
{
    LOG_DEBUG("Allocate {:.3f} Gib on Device w/ Managed", static_cast<float>(size) / (1024 * 1024 * 1024));
    return cudaMallocManaged(devPtr, size);
}

template <typename T>
cudaError_t cudaXRMallocAsync(T** devPtr, size_t size, const cudaStream_t stream)
{
    LOG_DEBUG("Allocate {:.3f} Gib on Device w/ Async", static_cast<float>(size) / (1024 * 1024 * 1024));
    return cudaMallocAsync(devPtr, size, stream);
}

template <typename T>
inline size_t cudaGetAllocatedSize(T* devPtr)
{
    CUdeviceptr pbase;
    size_t psize;
    cuMemGetAddressRange(&pbase, &psize, (CUdeviceptr)devPtr);
    return psize;
}

inline void cudaXFree(void* devPtr) { cudaSafeCall(cudaFree(devPtr)); }

inline void cudaXFreeHost(void* devPtr) { cudaSafeCall(cudaFreeHost(devPtr)); }

inline void cudaXFreeAsync(void* devPtr, cudaStream_t stream) { cudaSafeCall(cudaFreeAsync(devPtr, stream)); }

inline void cudaXMemcpy(void* output, const void* input, size_t count, cudaMemcpyKind kind)
{
    cudaSafeCall(cudaMemcpy(output, input, count, kind));
}

inline void
cudaXMemcpyAsync(void* output, const void* input, size_t count, cudaMemcpyKind kind, const cudaStream_t stream = 0)
{
    cudaSafeCall(cudaMemcpyAsync(output, input, count, kind, stream));
}

inline void cudaXMemset(void* devPtr, int value, size_t count) { cudaSafeCall(cudaMemset(devPtr, value, count)); }

inline void cudaXMemsetAsync(void* devPtr, int value, size_t count, const cudaStream_t stream)
{
    cudaSafeCall(cudaMemsetAsync(devPtr, value, count, stream));
}

inline void cudaXStreamSynchronize(const cudaStream_t stream) { cudaSafeCall(cudaStreamSynchronize(stream)); }
